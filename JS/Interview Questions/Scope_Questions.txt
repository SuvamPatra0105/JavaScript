1. Scopes of let, const and var
-->  let, const - block scope 
     var - function scope (or globally scoped, if declared outside a function)

2. What is Hoisting?
--> Hoisting is a JavaScript behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase (before the code is executed).

-----------------------------------------------------------
Variable Hoisting:

var: When you declare a variable using var, the declaration is hoisted to the top of its scope (function scope or global scope). However, only the declaration is hoisted, not the initialization.

console.log(a); // undefined..
var a = 5;
console.log(a); // 5

let, const: When you use let or const, the declaration is also hoisted, but unlike var, they cannot be accessed before their declaration. This is because let and const are block scoped, they exist in a "temporal dead zone" from the start of the block until the declaration is encountered.

console.log(b); // ReferenceError: Cannot access 'b' before initialization
let b = 10;
console.log(b); // 10

----------------------------------------------------------
Function Hoisting -

Function Declarations:
In the case of function declarations, both the function name and its body are hoisted to the top. This means you can call a function before it's defined in the code.

sayHello(); // "Hello, World!"

function sayHello() {
    console.log("Hello, World!");
}

Function Expressions:
If a function is assigned to a variable (i.e., a function expression), only the variable declaration is hoisted, not the function body.

console.log(myFunc); // undefined
var myFunc = function() {
    console.log("This is a function expression!");
};

myFunc(); // "This is a function expression!"

------------------------------------------------------

Class Hoisting:
Classes in JavaScript behave like let and const â€” they are hoisted, but you cannot access them before their declaration.


const obj = new MyClass();  // ReferenceError: Cannot access 'MyClass' before initialization

class MyClass {
    constructor() {
        console.log("MyClass instance created");
    }
};

let instance = new MyClass();  // "MyClass instance created"