1. JavaScript is a dynamically typed language, meaning that the type of a variable is determined at runtime rather than at compile time.

Example - 
let x = 10; // x is a number
x = "hello"; // now x is a string

2. null == 0 is false because null is only loosely equal to undefined(null == undefined -> true) and not to any other value like 0.
null >= 0 is true because null is coerced to 0, and the comparison 0 >= 0 evaluates to true.

3. console.log(9 > "5" < 8) -> true... how?
--> 9 > "5"... "5" is type coerced/converted to numeric 5 by JS.. 
so 9 > "5" is true
now true < 8... true is type coerced to 1.. so 1 < 8 -> true

4. console.log(4 > "3" < -1)  -> false

5. console.log(4 > [] < -2) -> false...... since [] evaluates to 0

6. console.log([] == []) / console.log([] === []) / console.log(['a'] == ['a']) / console.log(['a'] === ['a'])  --> all outputs false since objects(arrays and funcs) in JS are compared by references, not by value

7. ["a"] + ["b"] -> "ab".. plus sign is for concatenation..

8. [] + [] -> '' ... plus sign is for concatenation..

9. ![] -> false .. arrays are stored by reference, [] has some reference, so it is true.. hence ![] -> false

10. ![] + [] ->  false + "" -> "false".. not boolean but false in string format

11. (1 && 2) || 0 || 3  -> 2 

12. null && undefined -> null... since +null = 0

13. null || (2 && 3) || 4 -> 3

14. 'a' - 'a' -> NaN

15. 'ad' > 'ab' -> true... lexicographically checking

16. 'a' > 'A' -> true.. ascii value comparison

17. "9" > "11" -> true... lexicographically checking

18. "9" > 11 -> false

19. "9" < "a" -> true... lexicographically checking

20. 9 < "a" -> false... lexicographically checking only if both operands are strings

21. function a() {
      return
      {id: 2}
    }

    console.log(a())    // undefined since JS by default will put a ';' after return

    function b() {
      return {
      id: 2
      }
    }

    console.log(b())    // {id: 2}

22. arr = [1,2,3,4,5]

console.log(arr.length) -> 5
arr.length = 3;
console.log(arr) -> [1,2,3]
delete arr[1] 
console.log(arr) -> [1, empty, 3]
console.log(arr.length) -> 3
console.log(arr[1]) -> undefined

23. [1,2,3] == "1,2,3"  -> true

24. [1,2,3] === "1,2,3"  -> false

25. 0.1 + 0.2 == 0.3  -> false.. since 0.1 + 0.2 gives 0.30000000000000004 (floating point number)
To correct this -> (0.1 + 0.2).toFixed(1) gives 0.3

26. setTimeout(() => console.log('hello'))
    queueMicrotask(() => console.log('hi'))

-> hi
   hello
since priority of queueMicrotask is greater than that of setTimeout

27. g = { id: 2 };
b = g;

b.id = g.id++;  // no change
console.log(b)  // { id: 2 }
console.log(g)  // { id: 2 }

28. str = 'Hello'
str[1] = 'A'

console.log(str) // Hello.. strings are immutable

29. let flag = true
    setTimeout(() => {
    flag = false
    }, 1000)
    
    while(flag) {
      console.log('hi')
    }

--> will keep printing 'hi'.. due to infinite condition while loop will keep executing.. setTimeout will not be pushed into call stack

30. 
abc()
function abc() {
    console.log('1')
}
function abc() {
    console.log('2')
}
function abc() {
    console.log('3')
}

--> 3

31. arr1 = [1,2]
    arr2 = arr1
    arr2.push(3)
    console.log(arr1)  // [1,2,3].... arr1 & arr2 references are same 
    console.log(arr2)  // [1,2,3]
